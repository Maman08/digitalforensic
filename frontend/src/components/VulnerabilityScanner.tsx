import React, { useState } from 'react';
import { Search, AlertCircle, Shield, Server, Globe, Wifi, Loader2, AlertTriangle } from 'lucide-react';
import { ScanResult } from '../types';

export function VulnerabilityScanner() {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [selectedScan, setSelectedScan] = useState<ScanResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const startScan = async () => {
    if (!url.trim()) {
      setError('Please enter a valid URL');
      return;
    }

    try {
      setError(null);
      setIsScanning(true);
      setScanProgress(12);
      
      const response = await fetch('http://localhost:8004/scan/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Scan started:', data);
      
      if (data.scan_id) {
        pollScanStatus(data.scan_id);
      } else {
        throw new Error('No scan ID received');
      }
    } catch (error) {
      console.error('Error starting scan:', error);
      setError(error instanceof Error ? error.message : 'Failed to start scan');
      setIsScanning(false);
    }
  };

  const pollScanStatus = async (scanId: string) => {
    const interval = setInterval(async () => {
      try {
        const response = await fetch(`http://localhost:8004/scan_status/?scan_id=${scanId}`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.status === "completed") {
          console.log("Scan completed:", data);
          setScanProgress(100);
          
          await fetchScanInsights(data);
          clearInterval(interval);
          setIsScanning(false);
        } else {
          console.log("Scan in progress...");
          setScanProgress(prev => Math.min(prev + 10, 90));
        }
      } catch (error) {
        console.error('Error polling scan status:', error);
        setError(error instanceof Error ? error.message : 'Failed to get scan status');
        clearInterval(interval);
        setIsScanning(false);
      }
    }, 5000);

    return () => clearInterval(interval);
  };

  const fetchScanInsights = async (data: any) => {
    try {
      if (!data) {
        throw new Error("No scan data available");
      }
      
      const response = await fetch('http://localhost:5000/scaninsight', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('Insight result:', result);
      setSelectedScan(result);
    } catch (error) {
      console.error('Error getting scan insights:', error);
      setError(error instanceof Error ? error.message : 'Failed to get scan insights');
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'text-red-500 border-red-500/20 bg-red-500/10';
      case 'high':
        return 'text-orange-500 border-orange-500/20 bg-orange-500/10';
      case 'medium':
        return 'text-yellow-500 border-yellow-500/20 bg-yellow-500/10';
      case 'low':
        return 'text-blue-500 border-blue-500/20 bg-blue-500/10';
      default:
        return 'text-gray-500 border-gray-500/20 bg-gray-500/10';
    }
  };

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-8">
        Vulnerability Scanner
      </h1>

      {/* Scan Input */}
      <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
        <h2 className="text-xl font-semibold text-gray-100 mb-4">New Scan</h2>
        <div className="flex space-x-4">
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            disabled={isScanning}
            className="flex-1 bg-black/50 text-gray-100 rounded-lg px-4 py-2 border border-gray-800/50 focus:outline-none focus:ring-2 focus:ring-cyan-500/50 transition-all duration-300 disabled:opacity-50"
            style={{ zIndex: 10 }}
          />
          <button 
            onClick={startScan}
            disabled={!url || isScanning}
            className="px-6 py-2 bg-cyan-500/10 text-cyan-400 rounded-lg transition-all duration-300 btn-glow flex items-center space-x-2 hover:bg-cyan-500/20 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isScanning ? (
              <Loader2 className="w-5 h-5 animate-spin" />
            ) : (
              <Search className="w-5 h-5" />
            )}
            <span>{isScanning ? 'Scanning...' : 'Scan Now'}</span>
          </button>
        </div>

        {error && (
          <div className="mt-4 p-4 bg-red-500/10 border border-red-500/20 rounded-lg flex items-center space-x-2 text-red-400">
            <AlertCircle className="w-5 h-5" />
            <span>{error}</span>
          </div>
        )}

        {/* Scanning Progress */}
        {isScanning && (
          <div className="mt-6 space-y-4">
            <div className="flex items-center justify-between text-sm">
              <span className="text-gray-400">Scan in progress...</span>
              <span className="text-cyan-400">{scanProgress}%</span>
            </div>
            <div className="w-full h-2 bg-black/50 rounded-full overflow-hidden">
              <div 
                className="h-full bg-gradient-to-r from-cyan-500 to-blue-500 transition-all duration-300"
                style={{ width: `${scanProgress}%` }}
              />
            </div>
            <p className="text-gray-400 text-sm animate-pulse">
              Please wait while we analyze the target. This might take several minutes...
            </p>
          </div>
        )}
      </div>

      {selectedScan && !isScanning && (
        <>
          {/* Target Information */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
              <h2 className="text-xl font-semibold text-gray-100 mb-4">Target Information</h2>
              <div className="grid grid-cols-2 gap-4">
                <InfoCard
                  icon={<Globe className="w-5 h-5" />}
                  label="Hostname"
                  value={selectedScan["Target Hostname"]}
                />
                <InfoCard
                  icon={<Wifi className="w-5 h-5" />}
                  label="IP Address"
                  value={selectedScan["Target IP"]}
                />
                <InfoCard
                  icon={<Shield className="w-5 h-5" />}
                  label="Port"
                  value={selectedScan["Target Port"]}
                />
                <InfoCard
                  icon={<Server className="w-5 h-5" />}
                  label="Server"
                  value={selectedScan["Server"]}
                />
              </div>
            </div>

            <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
              <h2 className="text-xl font-semibold text-gray-100 mb-4">Scan Timing</h2>
              <div className="space-y-4">
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">Start Time</div>
                  <div className="text-gray-100">{selectedScan["Scan Start Time"]}</div>
                </div>
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">End Time</div>
                  <div className="text-gray-100">{selectedScan["Scan End Time"]}</div>
                </div>
                <div className="flex justify-between items-center p-4 bg-black/50 rounded-lg border border-gray-800/50">
                  <div className="text-gray-400">Duration</div>
                  <div className="text-gray-100">{selectedScan["Scan Duration"]}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Vulnerability Summary */}
          <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card mb-6">
            <h2 className="text-xl font-semibold text-gray-100 mb-4">Vulnerability Summary</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <SeverityCard
                level="Critical"
                count={selectedScan["Vulnerability Data"]["Vulnerability Severity"].Critical}
                color="text-red-400"
              />
              <SeverityCard
                level="High"
                count={selectedScan["Vulnerability Data"]["Vulnerability Severity"].High}
                color="text-orange-400"
              />
              <SeverityCard
                level="Medium"
                count={selectedScan["Vulnerability Data"]["Vulnerability Severity"].Medium}
                color="text-yellow-400"
              />
              <SeverityCard
                level="Low"
                count={selectedScan["Vulnerability Data"]["Vulnerability Severity"].Low}
                color="text-blue-400"
              />
            </div>
          </div>

          {/* Found Errors */}
          <div className="bg-gray-900/50 backdrop-blur-sm rounded-xl p-6 shadow-2xl hover-card">
            <h2 className="text-xl font-semibold text-gray-100 mb-4">Found Vulnerabilities</h2>
            <div className="space-y-4">
              {selectedScan["Vulnerability Data"]["Found Errors"].map((error, index) => (
                <div 
                  key={index}
                  className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-red-500/30"
                >
                  <div className="flex items-start space-x-3">
                    <AlertTriangle className="w-5 h-5 text-yellow-400 flex-shrink-0 mt-1" />
                    <p className="text-gray-300">{error}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
}

function InfoCard({ icon, label, value }: {
  icon: React.ReactNode;
  label: string;
  value: string;
}) {
  return (
    <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50 transition-all duration-300 hover:border-cyan-500/30">
      <div className="flex items-center space-x-3 mb-2">
        <div className="text-cyan-400">{icon}</div>
        <span className="text-gray-400 text-sm">{label}</span>
      </div>
      <p className="text-lg font-semibold text-transparent bg-clip-text bg-gradient-to-r from-gray-100 to-gray-300">
        {value}
      </p>
    </div>
  );
}

function SeverityCard({ level, count, color }: {
  level: string;
  count: number;
  color: string;
}) {
  return (
    <div className="bg-black/50 rounded-lg p-4 border border-gray-800/50">
      <div className={`text-2xl font-bold ${color} mb-2`}>{count}</div>
      <div className="text-gray-400">{level}</div>
    </div>
  );
}